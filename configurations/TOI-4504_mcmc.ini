;Exceptionally large Transit Timing Variations
;induced by two resonant warm gas giants in a three planet system.
;Michaela Vitkova et al
;https://arxiv.org/abs/2412.05609

[Astronomical Constants]     # Do not edit this section!
                             # You may use the astronomical constants defined in this section in
                             # all following sections, e.g. scope_left = 1.9 * au
g  = 6.67430e-11             # [m**3/kg/s**2] <float> gravitational constant +/- 0.00015
au = 1.495978707e11          # [m]   <float> astronomical unit
r_sun = 6.96342e8            # [m]   <float> solar radius
m_sun = 1.98847e30           # [kg]  <float> solar mass +/- 0.00007
l_sun = 3.83e26              # [W]   <float> solar luminosity
r_jup = 7.1492e7             # [m]   <float> Jupiter radius
m_jup = 1.8981246e27         # [kg]  <float> Jupiter mass
r_earth = 6.378135e6         # [m]   <float> Earth radius R⊕
m_earth = 5.9720e24          # [kg]  <float> Earth mass M⊕
v_earth = 2.97852e4          # [m/s] <float> Earth orbital velocity (if orbit was circular) V⊕
hour = 60 * 60               # [s] One hour in seconds
day = hour * 24              # [s] One day in seconds
year = day * 365.24219       # [s] Approximately one tropical earth year in seconds
rad2deg = 57.29577951308232  # 180 / pi

[Results]                    # Comment out the first parameter if you do not need the results (transit times etc.) of the simulation.
result_file = ../results/TOI-4504_debug.json  # <string> simulation results like transit times are saved in this file
result_dt = 1000             # Real time differences between simulation iterations when calculating transit times.
                             # This parameter is only used after the main simulation for finding the precise values for the transit parameters.
max_intervall_extensions = 5  # In unstable systems or when using a very large dt, sometimes the search for an TT has to be extended
                             # If no TT has been found max_intervall_extensions * dt around the expected interval between 2 iterations
                             # the search for this particular TT will be aborted. (dt comes from the list dts.)
comment = xxx                # You can use this comment for example as diagram title in your result plots
;verbose = True              # If False (which is default), only error messages will be printed to the console. Useful when running MCMC.

[Simulation]                 # Time intervalls and time steps of the simulation
                             # When fitting the simulation to real data, only the parameters start_date and dt are relevant.
start_date = 2458400         # [days] <float> Date at the start of the simulation. Often called t0. Typically Barycentric Julian Date (TDB).
dt = 1e5                     # [s] <float> real time difference between simulation iterations outside of simulation intervals where data is collected and used
                             # Needs to be small enough in order to calculate with sufficient
                             # precision when objects are close to each other.
                             # Reasonable values can easily be under 10 seconds or over 1e6 seconds.
                             # Set dt to a relatively high value, to improve performance when running MCMC
                             # Set dt to a relatively low value, when you want exact transit times in the result file.
;starts = [2458401.0, 2460660.0, 2460837.0]  # [days] <float> starting times of the intervalls for which simulation data will be calculated
;ends =   [2458401.9, 2460760.0, 2460882.0]  # [days] <float> ending times of the intervalls for which simulation data will be calculated
;dts =    [1000, 1000, 1000]  # [s] <float> real time differences between simulation iterations inside each intervall
;starts = [2458401.24, 2458483.05, 2458564.92, 2458647.17, 2459065.09, 2459148.34, 2459230.96, 2459313.11, 2459975.93, 2460059.48, 2460142.46, 2460695.47, 2460718.48, 2460736.58, 2460859.13]  # [days] <float> starting times of the intervalls for which simulation data will be calculated
;ends =   [2458401.57, 2458483.38, 2458565.29, 2458647.49, 2459065.39, 2459148.63, 2459231.25, 2459313.40, 2459976.21, 2460059.76, 2460142.74, 2460695.60, 2460718.74, 2460736.69, 2460859.31]  # [days] <float>   ending times of the intervalls for which simulation data will be calculated
;dts =    [600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600]  # [s] <float> real time differences between simulation iterations inside each intervall
starts = [2458400]           # [days] <float> starting times of the intervalls for which simulation data will be calculated
ends =   [2460920]           # [days] <float>   ending times of the intervalls for which simulation data will be calculated
dts =    [20000]              # [s] <float> real time differences between simulation iterations inside each intervall
                             # When fitting the simulation to measured flux, dt is typically identical with the exposure time of each measurement.
                             # Together, starts, ends and dts define the total number of simulation iterations 'total_iterations' for
                             # which data will be stored. total_iterations is usually much larger than the parameter frames. So not
                             # each simulation iteration will be shown in the video. Instead only 1/sampling_rate of the calculated
                             # iterations is used as a frame in the animation. sampling_rate = (total_iterations - 1) // frames + 1
                             # (// is integer-division)
                             # dt * sampling_rate is the real time difference between 2 frames in the animation.
                             # dt is proportional to the velocity of the objects in the animation.
                             # Because dt can change between intervalls, so can the animated velocity of objects in the video.
;sim_flux_file = ../data/simulations/sim001.csv # <string> When this parameter is provided, the simulated flux will be saved.
                             # The file has the same structure as the files containg measurered flux data which CurveSimulator can process:
                             # It is a CSV file with columns time, flux and flux_err.
sim_flux_err = 0.004         # White noise with standard deviation sim_flux_err will be added to the simulated flux.


[Fitting]                    # This section is only relevant for running a MCMC algorithm to fit the simulation to real data
                             # Comment out the first parameter if you do not want to fit the simulation to real data
;flux_file = ../data/TOI-4504/TOI4504_transits_sm0_3til94.csv  # <string> file with flux measurements (real data)
;flux_file = ../data/TOI-4504/TOI4504_b_transits_27til94.csv  # <string> file with flux measurements (real data)
;flux_file = ../data/TOI-4504/TOI4504_b_transits_bin1200_27til94.csv  # <string> file with flux measurements (real data)
                             # flux_file has 3 columns: time [days], normalized flux, normalized flux standard deviation
                             # While fitting, no result file and no video will be generated.
;lmfit = True                 # True for LMfit, False for MCMC
flux_weight = 1  # weighting flux residuals against rv and tt residuals
;rv_file = ../data/TOI-4504/rv.csv # <string> file with radial velocity measurements (real data)
rv_offset = 2064.7           # Estimate of the velocity measurement that corresponds to zero radial velocity of the object

tt_file = ../data/TOI-4504/tt.csv # <string> file with measured transit times (real data)
;tt_file = ../data/simulations/tt_sim.csv # <string> file with measured transit times (real data)
tt_weight = 1  # weighting tt residuals against rv and flux residuals
eclipsers_names = TOI4504c, TOI4504d  # only primary transits by these bodies are relevant when fitting for TT
eclipsees_names = TOI4504              # only transits eclipsing these bodies are relevant when fitting for TT
target_flux = 0.985  # Expected normalized flux during transits. Used for a simplified fitting of the transits
                     # times without searching for the precise transit times in the simulated flux

fitting_results_directory = ../results/mcmc  # All MCMC results are saved in the next available numbered subdirectory
walkers = 256                 # Number of mcmc chains
burn_in = 1#500                 # Number_of_points_disregarded (burn-in phase). Must be positive. Typically, 1000 is a good value.
steps = 1e7                  # Number of mcmc steps after burn-in phase
moves = (emcee.moves.StretchMove(a=2.0))  # Algorithm emcee uses for changing the parameters after each iteration
;moves = (emcee.moves.DEMove(), 0.8),(emcee.moves.DESnookerMove(), 0.2)  # Algorithm emcee uses for changing the parameters after each iteration

thin_samples = 1            # Keep only every <thin_samples>th sample from the chain to reduce autocorrelation in the chains and the size of the resulting arrays.
chunk_size = 10#250              # Every chunk_size steps after burn-in phase, results will be saved.
bins = 200#, 30              # Number of bins in mcmc histograms. May be several values separated by comma. Then a histogram will be generated for every bin value.
;unit = {"mass": "m_earth", "radius": "r_earth", "e": "1", "i": "deg", "P": "d", "a": "AU", "Omega": "deg", "omega": "deg", "pomega": "deg", "L": "deg", "ma": "deg", "ea": "deg", "nu": "deg", "T": "s", "t": "s"}
unit = {"mass": "m_jup", "radius": "r_jup", "e": "1", "i": "deg", "P": "d", "a": "AU", "Omega": "deg", "omega": "deg", "pomega": "deg", "L": "deg", "ma": "deg", "ea": "deg", "nu": "deg", "T": "s", "t": "s"}
                             # Specify for each of the above body parameters its unit to be used in mcmc result plots
;scale = {"mass": 1/m_earth, "radius": 1/r_earth, "e": 1, "i": rad2deg, "P": 1/day, "a": 1/au, "Omega": rad2deg, "omega": rad2deg, "pomega": rad2deg, "L": rad2deg, "ma": rad2deg, "ea": rad2deg, "nu": rad2deg, "T": 1, "t": 1}
scale = {"mass": 1/m_jup, "radius": 1/r_jup, "e": 1, "i": rad2deg, "P": 1/day, "a": 1/au, "Omega": rad2deg, "omega": rad2deg, "pomega": rad2deg, "L": rad2deg, "ma": rad2deg, "ea": rad2deg, "nu": rad2deg, "T": 1, "t": 1}
                             # Specify for each of the above body parameters the value it has
                             # to be multiplied with in order to represent its above specified unit.


[Video]                      # This section controls length and quality of the simulation and the resulting video.
                             # Comment out the first parameter to prevent video generation.
;video_file = ../animations/TOI-4504.mp4  # <string> the resulting video is saved in this file
frames = 60                  # <int> number of frames of video. Proportional to Curvesimulator's run time
                             # and to the length of the animation.
fps = 10                     # <int> frames per second in video. Proportional to the velocity of the
                             # objects in the animation. Inverse proportional to length of video.

[Scale]                      # This section controls the size of objects in the animation.
scope_left = 0.4 * au        # [m] <float> scope of left plotting window is [-scope_left, scope_left].
                             # Middle of window is (0.0, 0.0)
scope_right = 0.4 * au       # [m] <float> scope of right plotting window is [-scope_right, scope_right].
                             # Middle of window is (0.0, 0.0)
autoscaling = on             # <string> allowed values: on, off
star_scale_left = 100.0      # [1] <float> (if autoscale off) animate stars with StarScale_left times
                             # enlarged radius in left view.
planet_scale_left = 1000.0   # [1] <float> (if autoscale off) animate planets with PlanetScale_left times
                             # enlarged radius in left view.
star_scale_right = 100.0     # [1] <float> (if autoscale off) animate stars with StarScale_right times
                             # enlarged radius in right view.
planet_scale_right = 1000.0  # [1] <float> (if autoscale off) animate planets with PlanetScale_right times
                             # enlarged radius in right view.
min_radius = 0.4             # [%] <float> (if autoscale on) radius of smallest body in animation relative
                             # to plot scope. radius=100 would fill the whole plot.
max_radius = 2.0             # [%] <float> (if autoscale on) maximum radius of largest body in animation
                             # relative to plot scope. radius=100 would fill the whole plot.
                             # If necessary, scaling will be done logarithmically instead of linear.

[Plot]                       # Adjust the plot parameters in this section only if the plots in the video do not fit your screen
figure_width = 16            # <int>   width of figure which contains all plots and animations
figure_height = 8            # <int>   height of figure which contains all plots and animations
xlim = 1.25                  # <float> left and right view both show x-values between -Xlim and + Xlim
ylim = 1.0                   # <float> left and right view both show y-values between -Ylim and + Ylim
red_dot_height = 1/20        # <float> height of red dot in light curve plot relative to height of y-axis
red_dot_width = 1/235        # <float> width of red dot in light curve plot relative to width of x-axis


[TOI4504]
body_type = star
primary = self
color = 0.99, 0.99, 0.99
mass = 0.885 * m_sun       # +-0.05
radius = 0.92 * r_sun
luminosity = 0.62 * l_sun
limb_darkening_1 = 0.4765  # paper contains different parameters q1, q2 for different planets. I averaged them. The effective difference is tiny.
limb_darkening_2 = 0.3495
limb_darkening_parameter_type = q


[TOI4504b]
body_type = planet
primary =   TOI-4504
color =     0.99, 0.01, 0.01
#           value               lower bound       upper bound        sigma
mass =      10.4 * m_earth,   # 1.0 * m_earth,    20.0 * m_earth,    10 * m_earth
radius =    2.691 * r_earth,  # 0.01 * r_earth,   5.0 * r_earth,     2.0 * r_earth
e =         0                 #
i =         86.5,             # 84.0,             89.0,              1.5
P =         2.42614 * day,    # 2.426 * day,      2.4263 * day,      0.00005 * day
Omega =     0                 #
omega =     90                #
ma =        303.6,            # 301.25,           306.25,            1


[TOI4504d]  # planet d before planet c because the integration (rebound) works best when the innermost planets come first
body_type = planet
primary =   TOI-4504
color =     0.01, 0.99, 0.01
#           value               lower bound       upper bound        sigma
mass =      1.4166 * m_jup,     0.1 * m_jup,      10.0 * m_jup,       0.5 * m_jup
radius =    1.012 * r_jup,    # 0.2 * r_jup,      4.0 * r_jup,       0.8 * r_jup
e =         0.0445,             0.0,              0.15,              0.035
i =         89.0              # 86.5,             89.5,              0.5
P =         40.986 * day,       39.7 * day,       42.2 * day,        0.6 * day
Omega =     0,                  -15,              15,                8
omega =     180,                0,                359.99,            120
ma =        180,                0,                359.99,            120
    
    
[TOI4504c]
body_type = planet    
primary =   TOI-4504    
color =     0.99, 0.99, 0.01    
#           value               lower bound       upper bound        sigma
mass =      3.7672 * m_jup,     0.1 * m_jup,      10.0 * m_jup,      0.5 * m_jup
radius =    0.9897 * r_jup,   # 0.8 * r_jup,      1.2 * r_jup,       0.15 * r_jup
e =         0.0320,             0.0,              0.10,              0.025
i =         89.79,            # 89.25,            90.0,              0.15
P =         81.8 * day,         81.7 * day,       82.0 * day,        0.1 * day
Omega =     0.8,              # -15,              15,                3
omega =     180,                0,                359.99,            120
ma =        180,                0,                359.99,            120
