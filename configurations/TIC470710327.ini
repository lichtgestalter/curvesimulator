[Astronomical Constants]
# do not edit this section
# you may use the astronomical constants defined in this section in all following sections, e.g. scope_left = 1.9 * au
g  = 6.67430e-11             # [m**3/kg/s**2] <float> gravitational constant +/- 0.00015
au = 1.495978707e11          # [m]   <float> astronomical unit
r_sun = 6.96342e8            # [m]   <float> solar radius
m_sun = 1.98847e30           # [kg]  <float> solar mass +/- 0.00007
l_sun = 3.83e26              # [W]   <float> solar luminosity
r_jup = 7.1492e7             # [m]   <float> Jupiter radius
m_jup = 1.8981246e27         # [kg]  <float> Jupiter mass
r_earth = 6.378135e6         # [m]   <float> Earth radius
m_earth = 5.9720e24          # [kg]  <float> Earth mass
v_earth = 2.97852e4          # [m/s] <float> Earth orbital velocity (if orbit was circular)

[Video]                      # This section controls length and quality of the simulation and the resulting video.
video_file = ../animations/TIC470710327.mp4  # <string> the resulting video is saved in this file
frames = 3                 # <int> number of frames of video. Proportional to Curvesimulator's run time
                             # and to the length of the animation.
fps = 25                     # <int> frames per second in video. Proportional to the velocity of the
                             # objects in the animation. Inverse proportional to length of video.
dt = 10                      # [s] <int> real time difference between simulation iterations. Proportional to
                             # the velocity of the objects in the animation. Needs to be small in order to
                             # calculate with sufficient precision when objects are close to each other.
                             # Reasonable values can easily be under 10 seconds or over 10000 seconds. If
                             # your orbits change after a few rotations then you probably need a smaller value.
                             # dt * sampling_rate is the real time difference between 2 frames in the animation.
                             # If your star system produces eclipses, dt * sampling_rate should be < 1000 in
                             # order to generate an accurate light curve.
sampling_rate = 1440         # <int> Calculating the physics is much faster than animating it. Therefore only
                             # 1/sampling_rate of the calculated iterations is used as a frame in the animation.
                             # In other words: The simulation's number of calculated iterations and also the
                             # length of the array with light curve data will be equal to frames * sampling_rate.

[Scale]                      # This section controls the size of objects in the animation.
scope_left = 1.5 * au        # [m] <float> scope of left plotting window is [-scope_left, scope_left].
                             # Middle of window is (0.0, 0.0)
scope_right = 1.5 * au       # [m] <float> scope of right plotting window is [-scope_right, scope_right].
                             # Middle of window is (0.0, 0.0)
autoscaling = on             # <string> allowed values: on, off
star_scale_left = 100.0      # [1] <float> (if autoscale off) animate stars with StarScale_left times
                             # enlarged radius in left view.
planet_scale_left = 1000.0   # [1] <float> (if autoscale off) animate planets with PlanetScale_left times
                             # enlarged radius in left view.
star_scale_right = 100.0     # [1] <float> (if autoscale off) animate stars with StarScale_right times
                             # enlarged radius in right view.
planet_scale_right = 1000.0  # [1] <float> (if autoscale off) animate planets with PlanetScale_right times
                             # enlarged radius in right view.
min_radius = 0.4             # [%] <float> (if autoscale on) radius of smallest body in animation relative
                             # to plot scope. radius=100 would fill the whole plot.
max_radius = 1.6             # [%] <float> (if autoscale on) maximum radius of largest body in animation
                             # relative to plot scope. radius=100 would fill the whole plot.
                             # If necessary, scaling will be done logarithmically instead of linear.

[Plot]
start_date = 2458785.533     # Barycentric Julian Date (TDB) at the start of the simulation
# adjust the following plot parameters in this section only if the plots do not fit well on your screen
figure_width = 16            # <int>   width of figure which contains all plots and animations
figure_height = 8            # <int>   height of figure which contains all plots and animations
xlim = 1.25                  # <float> left and right view both show x-values between -Xlim and + Xlim
ylim = 1.0                   # <float> left and right view both show y-values between -Ylim and + Ylim
red_dot_height = 1/13        # <float> relative height of red dot in light curve plot
red_dot_width = 1/200        # <float> relative width of red dot in light curve plot


;[DUMMY]
;body_type = star                     # star/planet
;color = 0.99, 0.99, 0.99             # RGB value in animation. Minimum = 0, maximum = 1.
;mass = 0.0000000000001 * m_sun                   # [kg]
;radius = .5 * r_sun                 # [m]
;luminosity = 0 * l_sun         # [W]
;limb_darkening = [0.3, 0.9, -0.2]    # Limb darkening coefficients a0, a1, ..., an


[TIC 470710327 A]
body_type = star                     # star/planet
color = 0.99, 0.01, 0.01             # RGB value in animation. Minimum = 0, maximum = 1.
mass = 6.5 * m_sun                   # [kg]
radius = 2.0 * r_sun                 # [m]
luminosity = 2**3.14 * l_sun         # [W]
limb_darkening = [0.3, 0.9, -0.2]    # Limb darkening coefficients a0, a1, ..., an
;startposition = 0.0, 3620798086.0, 0.0
;velocity = -235000.0, -85118.0, -12688.0
;e = 0.0                              # [1] eccentricity
;i = 90.0                             # [deg] inclination. 90°: we see orbit edge-on. >90°: planet moves below and
;a = 0.048 * au                       # [m] semi-major axis
;P = 3600 * 24 * 1.1047               # [s] Period
;longitude_of_ascending_node = 0.0    # [deg] Ω: longitude of ascending node
;longitude_of_periapsis = 0.0         # [deg] ϖ: longitude of periapsis
;nu = 270                              # [deg] true anomaly.


[TIC 470710327 B]
# Mandatory parameters:
body_type = star                     # star/planet
color = 0.99, 0.99, 0.01             # RGB value in animation. Minimum = 0, maximum = 1.
mass = 5.9 * m_sun                   # [kg]
radius = 1.5 * r_sun                 # [m]
luminosity = 2**3.08 * l_sun         # [W]
limb_darkening = [0.3, 0.9, -0.2]    # Limb darkening coefficients a0, a1, ..., an

# if the state vector (startposition and velocity) is provided, no Kepler orbit parameters have to be provided
#startposition = 1.0 * au, 1.0 * au, 1.0 * au  # [m], [m], [m]
#velocity = 1.0 * v_earth, 1.0 * v_earth, 1.0 * v_earth  # [m/s], [m/s], [m/s]
;startposition = 0.0, -3620798086.0, 0.0
;velocity = 235000.0, -85118.0, -12688.0

# -----  ORBITAL ELEMENTS  -----
# Mandatory orbital elements:
e = 0.0                              # [1] eccentricity
i = 90.0                             # [deg] inclination. 90°: we see orbit edge-on. >90°: planet moves below and
                                     # in front of the sun, as well as above and behind the sun in edge view.

# One of the following two parameters has to be provided.
;a = 0.096 * au                       # [m] semi-major axis
;a = 0.048 * au                       # [m] semi-major axis
P = 3600 * 24 * 1.1047               # [s] Period

# Two of the following three parameters have to be provided:
longitude_of_ascending_node = 0.0    # [deg] Ω: longitude of ascending node
longitude_of_periapsis = 0.0         # [deg] ϖ: longitude of periapsis
#argument_of_periapsis = 0           # [deg] ω: argument of periapsis

# One of the following five parameters has to be provided in order to specify the initial position on the orbit.
#L = 0                               # [deg] mean longitude
nu = 90                              # [deg] true anomaly.
#ma = 0                              # [deg] mean anomaly
#ea = 0                              # [deg] eccentric anomaly
#T = 0                                # [s] Time of periapsis
                                     # The absolute time of periapsis is start_date - T

#t = 0                               # [t] Optional additional time difference. Default=0.


[TIC 470710327 C]
body_type = star                     # star/planet
color = 0.01, 0.99, 0.01             # RGB value in animation
mass = 15.25 * m_sun                 # [kg]
radius = 6.5 * r_sun                 # [m]
luminosity = 2**4.79 * l_sun         # [W]
limb_darkening = [0.3, 0.9, -0.2]    # Limb darkening coefficients a0, a1, ..., an
e = 0.3                              # [1] eccentricity
i = 74.0                             # [deg] inclination
P = 3600 * 24 * 52.04                # [s] Period
longitude_of_ascending_node = 0.0    # [deg] Ω: longitude of ascending node
longitude_of_periapsis = 0.0         # [deg] ϖ: longitude of periapsis
nu = 270                             # [s] Time of periapsis

