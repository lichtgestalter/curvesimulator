;Exceptionally large Transit Timing Variations
;induced by two resonant warm gas giants in a three planet system.
;Michaela Vitkova et al
;https://arxiv.org/abs/2412.05609

[Astronomical Constants]
;do not edit this section
;you may use the astronomical constants defined in this section in all following sections, e.g. scope_left = 1.9 * au
g  = 6.67430e-11             # [m**3/kg/s**2] <float> gravitational constant +/- 0.00015
au = 1.495978707e11          # [m]   <float> astronomical unit
r_sun = 6.96342e8            # [m]   <float> solar radius
m_sun = 1.98847e30           # [kg]  <float> solar mass +/- 0.00007
l_sun = 3.83e26              # [W]   <float> solar luminosity
r_jup = 7.1492e7             # [m]   <float> Jupiter radius
m_jup = 1.8981246e27         # [kg]  <float> Jupiter mass
r_earth = 6.378135e6         # [m]   <float> Earth radius R⊕
m_earth = 5.9720e24          # [kg]  <float> Earth mass M⊕
v_earth = 2.97852e4          # [m/s] <float> Earth orbital velocity (if orbit was circular) V⊕
hour = 60 * 60
day = hour * 24
year = day * 365.25
;verbose = False              # If False, only error messages will be printed to the console

[Video]                      # This section controls length and quality of the simulation and the resulting video.
comment = params as in Vitkova paper
video_file = ../animations/TOI-4504.mp4  # <string> the resulting video is saved in this file
result_file = ../results/TOI-4504.json  # <string> simulation results like transit times are saved in this file
frames = 1                   # <int> number of frames of video. Proportional to Curvesimulator's run time
                             # and to the length of the animation.
fps = 1                     # <int> frames per second in video. Proportional to the velocity of the
                             # objects in the animation. Inverse proportional to length of video.
dt = 1800                    # [s] <float> real time difference between simulation iterations. Proportional to
                             # the velocity of the objects in the animation. Needs to be small in order to
                             # calculate with sufficient precision when objects are close to each other.
                             # Reasonable values can easily be under 10 seconds or over 10000 seconds. If
                             # your orbits change after a few rotations then you probably need a smaller value.
                             # dt * sampling_rate is the real time difference between 2 frames in the animation.
                             # If your star system produces eclipses, dt * sampling_rate should be < 1000 in
                             # order to generate an accurate light curve.
;sampling_rate = 12*(2520000-2458400)    # <int> Calculating the physics is much faster than animating it. Therefore only
sampling_rate = 13560   #1356      # <int> Calculating the physics is much faster than animating it. Therefore only
                             # 1/sampling_rate of the calculated iterations is used as a frame in the animation.
                             # In other words: The simulation's number of calculated iterations and also the
                             # length of the array with light curve data will be equal to frames * sampling_rate.

[Scale]                      # This section controls the size of objects in the animation.
scope_left = 0.4 * au        # [m] <float> scope of left plotting window is [-scope_left, scope_left].
                             # Middle of window is (0.0, 0.0)
scope_right = 0.4 * au       # [m] <float> scope of right plotting window is [-scope_right, scope_right].
                             # Middle of window is (0.0, 0.0)
autoscaling = on             # <string> allowed values: on, off
star_scale_left = 100.0      # [1] <float> (if autoscale off) animate stars with StarScale_left times
                             # enlarged radius in left view.
planet_scale_left = 1000.0   # [1] <float> (if autoscale off) animate planets with PlanetScale_left times
                             # enlarged radius in left view.
star_scale_right = 100.0     # [1] <float> (if autoscale off) animate stars with StarScale_right times
                             # enlarged radius in right view.
planet_scale_right = 1000.0  # [1] <float> (if autoscale off) animate planets with PlanetScale_right times
                             # enlarged radius in right view.
min_radius = 0.4             # [%] <float> (if autoscale on) radius of smallest body in animation relative
                             # to plot scope. radius=100 would fill the whole plot.
max_radius = 2.0             # [%] <float> (if autoscale on) maximum radius of largest body in animation
                             # relative to plot scope. radius=100 would fill the whole plot.
                             # If necessary, scaling will be done logarithmically instead of linear.

[Plot]
start_date = 2458400.011       # <float> Barycentric Julian Date (TDB) at the start of the simulation. Often called t0.
;start_date = 2458400.0       # <float> Barycentric Julian Date (TDB) at the start of the simulation. Often called t0.
;adjust the following plot parameters in this section only if the plots do not fit well on your screen
figure_width = 16            # <int>   width of figure which contains all plots and animations
figure_height = 8            # <int>   height of figure which contains all plots and animations
xlim = 1.25                  # <float> left and right view both show x-values between -Xlim and + Xlim
ylim = 1.0                   # <float> left and right view both show y-values between -Ylim and + Ylim
red_dot_height = 1/20        # <float> relative height of red dot in light curve plot
red_dot_width = 1/235        # <float> relative width of red dot in light curve plot


[TOI-4504]
body_type = star
color = 0.99, 0.99, 0.99
mass = (0.885 - 0 * 0.05) * m_sun       # +-0.05
radius = 0.92 * r_sun
luminosity = 0.62 * l_sun
limb_darkening = [0.4765, 0.3495]  # paper contains different parameters q1, q2 for different planets. I averaged them. The effective difference is tiny.
limb_darkening_parameter_type = q


[TOI-4504b]
body_type = planet
color = 0.99, 0.01, 0.01
mass = 10.4 * m_earth
radius = 2.691 * r_earth
e = 0.0
i = 87.4
P = 3600 * 24 * 2.42614
longitude_of_ascending_node = 0
argument_of_periapsis = 90
T = 0
t = 3600 * 24 * -0.383  # first Transit T0 BJD 2458400.383, 0.383 days after simulation's start date (t0 [BJD] 2459038.458)


[TOI-4504c]
body_type = planet
color = 0.99, 0.99, 0.01
mass = (3.7672 - 0 * 0.18) * m_jup  # +-0.18
radius = 0.9897 * r_jup
e = 0.0320 - 0 * 0.0015  # +-0.0015
i = 89.69 - 0 * 0.03  # +-0.03
P = 3600 * 24 * (82.5438 - 0 * 0.0163) # valid for epoch BJD = 2458400    +-0.0163
longitude_of_ascending_node = 0 + 0 * 1  # Ω +-1
argument_of_periapsis = 270.9 -0 * 2.1 # 270.9 +-2.1???  ω
ma = 173.1 - 0 * 2  # +-2


[TOI-4504d]
body_type = planet
color = 0.01, 0.99, 0.01
mass = 1.4166 * m_jup  # 1.4166 * m_jup +-0.0649
radius = 1.012 * r_jup  # 0.7156 * r_jup assuming TOI-4504d has the same density as TOI-4504c
e = 0.0445 # 0.0445 +-0.001
i = 88.8 # 84.74 +-0.29
P = 3600 * 24 * 40.986  # 40.5634  +-0.0366 valid for epoch BJD = 2458400
longitude_of_ascending_node = 0  # Ω unknown
argument_of_periapsis = 93.5  # 93.5 +-6
ma = 270  # 280.6 +-7.4
