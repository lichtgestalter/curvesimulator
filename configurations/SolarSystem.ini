[Astronomical Constants]
# do not edit this section
# you may use the astronomical constants defined in this section in all following sections, e.g. scope_left = 1.9 * au
g  = 6.67430e-11             # [m**3/kg/s**2] <float> gravitational constant +/- 0.00015  This parameter must be defined here!
au = 1.495978707e11          # [m]   <float> astronomical unit
r_sun = 6.96342e8            # [m]   <float> solar radius
m_sun = 1.98847e30           # [kg]  <float> solar mass +/- 0.00007
l_sun = 3.83e26              # [W]   <float> solar luminosity
r_jup = 7.1492e7             # [m]   <float> Jupiter radius
m_jup = 1.8981246e27         # [kg]  <float> Jupiter mass
r_earth = 6.378135e6         # [m]   <float> Earth radius
m_earth = 5.9720e24          # [kg]  <float> Earth mass
v_earth = 2.97852e4          # [m/s] <float> Earth orbital velocity (if orbit was circular)

[Video]                      # This section controls length and quality of the simulation and the resulting video.
video_file = ../animations/SolarSystem.mp4  # <string> the resulting video is saved in this file
frames = 300                 # <int> number of frames of video. Proportional to Curvesimulator's run time
                             # and to the length of the animation.
fps = 25                     # <int> frames per second in video. Proportional to the velocity of the
                             # objects in the animation. Inverse proportional to length of video.
dt = 10000                   # [s] <float> real time difference between simulation iterations. Proportional to
                             # the velocity of the objects in the animation. Needs to be small in order to
                             # calculate with sufficient precision when objects are close to each other.
                             # Reasonable values can easily be under 10 seconds or over 10000 seconds. If
                             # your orbits change after a few rotations then you probably need a smaller value.
                             # dt * sampling_rate is the real time difference between 2 frames in the animation.
                             # If your star system produces eclipses, dt * sampling_rate should be < 1000 in
                             # order to generate an accurate light curve.
sampling_rate = 72           # <int> Calculating the physics is much faster than animating it. Therefore only
                             # 1/sampling_rate of the calculated iterations is used as a frame in the animation.
                             # In other words: The simulation's number of calculated iterations and also the
                             # length of the array with light curve data will be equal to frames * sampling_rate.

[Scale]                      # This section controls the size of objects in the animation.
scope_left = 31.0 * au        # [m] <float> scope of left plotting window is [-scope_left, scope_left].
                             # Middle of window is (0.0, 0.0)
scope_right = 31.0 * au       # [m] <float> scope of right plotting window is [-scope_right, scope_right].
                             # Middle of window is (0.0, 0.0)
autoscaling = on             # <string> allowed values: on, off
star_scale_left = 100.0      # [1] <float> (if autoscale off) animate stars with StarScale_left times
                             # enlarged radius in left view.
planet_scale_left = 1000.0   # [1] <float> (if autoscale off) animate planets with PlanetScale_left times
                             # enlarged radius in left view.
star_scale_right = 100.0     # [1] <float> (if autoscale off) animate stars with StarScale_right times
                             # enlarged radius in right view.
planet_scale_right = 1000.0  # [1] <float> (if autoscale off) animate planets with PlanetScale_right times
                             # enlarged radius in right view.
min_radius = 0.2             # [%] <float> (if autoscale on) radius of smallest body in animation relative
                             # to plot scope. radius=100 would fill the whole plot.
max_radius = 0.6             # [%] <float> (if autoscale on) maximum radius of largest body in animation
                             # relative to plot scope. radius=100 would fill the whole plot.
                             # If necessary, scaling will be done logarithmically instead of linear.

[Plot]
start_date = 2468000.0       # Barycentric Julian Date (TDB) at the start of the simulation
# adjust the following plot parameters in this section only if the plots do not fit well on your screen
figure_width = 16            # <int>   width of figure which contains all plots and animations
figure_height = 8            # <int>   height of figure which contains all plots and animations
xlim = 1.25                  # <float> left and right view both show x-values between -Xlim and + Xlim
ylim = 1.0                   # <float> left and right view both show y-values between -Ylim and + Ylim
red_dot_height = 1/13        # <float> relative height of red dot in light curve plot
red_dot_width = 1/200        # <float> relative width of red dot in light curve plot

[Debug]                      # For debugging purposes only. Ignore the whole section if you aren't
                             # a curvesimulator developer.
# debug_L = [0, 20, 40, 88]  # run funktion debug_print_points for these values of L.
                             # First value should be 0.
debug_L = [i for i in range(0, 360, 17)] # run funktion debug_print_points for these values of L.
                                         # First value should be 0.

# all following sections define physical bodies in the simulation
# the section names define the names of the bodies

[Sol]
body_type = star                     # star/planet
color = 0.99, 0.99, 0.11             # RGB value in animation. Minimum = 0, maximum = 1.
mass = 1.0 * m_sun                   # [kg]
radius = 1.0 * r_sun                 # [m]
luminosity = 1.0 * l_sun             # [W]
limb_darkening = [0.3, 0.9, -0.2]    # Limb darkening coefficients a0, a1, ..., an


[Mercury]
# Mandatory parameters:
body_type = planet                   # star/planet
color = 0.77, 0.66, 0.22             # RGB value in animation. Minimum = 0, maximum = 1.
mass = 0.33e24                       # [kg]
radius = 2440e03                     # [m]

# if the state vector (startposition and velocity) is provided, no Kepler orbit parameters have to be provided
#startposition = 1.0 * au, 1.0 * au, 1.0 * au  # [m], [m], [m]
#velocity = 1.0 * v_earth, 1.0 * v_earth, 1.0 * v_earth  # [m/s], [m/s], [m/s]

# -----  ORBITAL ELEMENTS  -----
# Mandatory orbital elements:
e = 0.20563593                       # [1] eccentricity
i = 90 - 7.00497902                      # [deg] inclination. 90°: we see orbit edge-on. >90°: planet moves below and
;i = 7.00497902                      # [deg] inclination. 90°: we see orbit edge-on. >90°: planet moves below and
                                     # in front of the sun, as well as above and behind the sun in edge view.

# One of the following two parameters has to be provided.
a = 0.38709927 * au                  # [m] semi-major axis
#P = 3600 * 24 * 365.25              # [s] Period

# Two of the following three parameters have to be provided:
Omega = 48.33076593  # [deg] Ω: longitude of ascending node
pomega = 77.45779628       # [deg] ϖ: longitude of periapsis
#omega = 0                 # [deg] ω: argument of periapsis

# One of the following five parameters has to be provided in order to specify the initial position on the orbit.
L = 252.25032350                     # [deg] mean longitude
#L = 0                               # [deg] mean longitude
#nu = 0                              # [deg] true anomaly.
#ma = 0                              # [deg] mean anomaly
#ea = 0                              # [deg] eccentric anomaly
#T = 0                               # [s] Time of periapsis
                                     # The absolute time of periapsis is start_date - T

#t = 0                               # [t] Optional additional time difference. Default=0.


[Venus]
body_type = planet                         # star/planet
color = 0.99, 0.99, 0.99                   # RGB value in animation
mass = 4.87e24                             # [kg]
radius = 6052e03                           # [m]
e = 0.00677672                             # [1] eccentricity
;i = 3.39467605                            # [deg] inclination
i = 90 - 3.39467605                            # [deg] inclination
a = 0.72333566 * au                        # [m] semi-major axis
Omega = 76.67984255  # [deg] Ω: longitude of ascending node
pomega = 131.60246718      # [deg] ϖ: longitude of periapsis
L = 181.97909950                           # [deg] mean longitude

[Earth]
body_type = planet                         # star/planet
color = 0.31, 0.51, 0.99                   # RGB value in animation
mass = 1.0 * m_earth                       # [kg]
radius = 1.0 * r_earth                     # [m]
e = 0.01671022                             # [1] eccentricity
;i = -0.00001531                        # [deg] inclination
i = 90 + 0.00001531                        # [deg] inclination
a = 1.00000011 * au                        # [m] semi-major axis
Omega = -11.26064    # [deg] Ω: longitude of ascending node
pomega = 102.94719         # [deg] ϖ: longitude of periapsis
L = 100.46435                              # [deg] mean longitude

[Mars]
body_type = planet                         # star/planet
color = 0.99, 0.22, 0.22                   # RGB value in animation
mass = 0.642e24                            # [kg]
radius = 3346e03                           # [m]
e = 0.09339410                             # [1] eccentricity
;i = 1.84969142                            # [deg] inclination
i = 90 - 1.84969142                            # [deg] inclination
a = 1.52371034 * au                        # [m] semi-major axis
Omega = 49.55953891  # [deg] Ω: longitude of ascending node
pomega = -23.94362959      # [deg] ϖ: longitude of periapsis
L = -4.55343205                            # [deg] mean longitude

[Jupiter]
body_type = planet                         # star/planet
color = 0.44, 0.88, 0.44                   # RGB value in animation
mass = 1.0 * m_jup                         # [kg]
radius = 1.0 * r_jup                       # [m]
e = 0.04838624                             # [1] eccentricity
;i = 1.30439695                            # [deg] inclination
i = 90 - 1.30439695                            # [deg] inclination
a = 5.20288700 * au                        # [m] semi-major axis
Omega = 100.47390909 # [deg] Ω: longitude of ascending node
pomega = 14.72847983       # [deg] ϖ: longitude of periapsis
L = 34.39644051                            # [deg] mean longitude

[Saturn]
body_type = planet                         # star/planet
color = 0.66, 0.66, 0.22                   # RGB value in animation
mass = 568e24                              # [kg]
radius = 60268e03                          # [m]
e = 0.05386179                             # [1] eccentricity
;i = 2.48599187                            # [deg] inclination
i = 90 - 2.48599187                            # [deg] inclination
a = 9.53667594 * au                        # [m] semi-major axis
Omega = 113.66242448 # [deg] Ω: longitude of ascending node
pomega = 92.59887831       # [deg] ϖ: longitude of periapsis
L = 49.95424423                            # [deg] mean longitude

[Uranus]
body_type = planet                         # star/planet
color = 0.11, 0.33, 0.99                   # RGB value in animation
mass = 86.8e24                             # [kg]
radius = 25559e03                          # [m]
e = 0.04725744                             # [1] eccentricity
;i = 0.77263783                            # [deg] inclination
i = 90 - 0.77263783                            # [deg] inclination
a = 19.18916464 * au                       # [m] semi-major axis
Omega = 74.01692503  # [deg] Ω: longitude of ascending node
pomega = 170.95427630      # [deg] ϖ: longitude of periapsis
L = 313.23810451                           # [deg] mean longitude

[Neptun]
body_type = planet                         # star/planet
color = 0.11, 0.33, 0.99                   # RGB value in animation
mass = 102e24                              # [kg]
radius = 24764e03                          # [m]
e = 0.00859048                             # [1] eccentricity
;i = 1.77004347                            # [deg] inclination
i = 90 - 1.77004347                            # [deg] inclination
a = 30.06992276 * au                       # [m] semi-major axis
Omega = 131.78422574 # [deg] Ω: longitude of ascending node
pomega = 44.96476227       # [deg] ϖ: longitude of periapsis
L = -55.12002969                           # [deg] mean longitude

; https://ssd.jpl.nasa.gov/planets/approx_pos.html Table 1
;               a                e               i               L               ϖ               Ω
;Mercury   0.38709927      0.20563593      7.00497902      252.25032350     77.45779628     48.33076593
;Venus     0.72333566      0.00677672      3.39467605      181.97909950    131.60246718     76.67984255
;EM Bary   1.00000261      0.01671123     -0.00001531      100.46457166    102.93768193      0.0
;Mars      1.52371034      0.09339410      1.84969142       -4.55343205    -23.94362959     49.55953891
;Jupiter   5.20288700      0.04838624      1.30439695       34.39644051     14.72847983    100.47390909
;Saturn    9.53667594      0.05386179      2.48599187       49.95424423     92.59887831    113.66242448
;Uranus   19.18916464      0.04725744      0.77263783      313.23810451    170.95427630     74.01692503
;Neptune  30.06992276      0.00859048      1.77004347      -55.12002969     44.96476227    131.78422574

;I give you a table with the orbital elements of the planets of our solar system.
;From a viewpoint far away from the solar system, a transit of one of these planets before the sun can per definition only happen
;if this planet has an inclination i of about 0 degrees.
;Sadly, when talking about exoplanets another convention has been established:
;Transits happen only for exoplanets with an inclination i of about 90 degrees.
;Convert the table, so it fits the convention for exoplanets.
