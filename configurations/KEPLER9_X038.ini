;1) Kepler-9: A System of Multiple Planets Transiting a Sun-Like Star, Confirmed by Timing Variations, Matthew J. Holman et al.
;2) MODELING Kepler TRANSIT LIGHT CURVES AS FALSE POSITIVES: REJECTION OF BLEND SCENARIOS FOR KEPLER-9, AND VALIDATION OF KEPLER-9 D, A SUPER-EARTH-SIZE PLANET IN A MULTIPLE SYSTEM, Guillermo Torres et al.
;3) The multiple planets transiting Kepler-9, I. Inferring stellar properties and planetary compositions, Mathieu Havel et al.
;4) Kepler-9 revisited, 60% the mass with six times more data, Stefan Dreizler and Aviv Ofir
;5) Kepler Object of Interest Network II. Photodynamical modelling of Kepler-9 over 8 years of transit observations, J. Freudenthal et al.
;6) HARPS-N radial velocities confirm the low densities of the Kepler-9 planets, Borsato, L et al.
;
;Extracted TT manually from 5) but did not use them (KEPLER9.xlsx)
;Used TT from 4) Table 1
;Used planet parameters from 6) Table 3
;Removed the first few TT from data, because 6) Tabele 3 refers to epoch 2455088.212 instead of 2454900



[Astronomical Constants]     # Do not edit this section!
                             # You may use the astronomical constants defined in this section in
                             # all following sections, e.g. scope_left = 1.9 * au
g  = 6.67430e-11             # [m**3/kg/s**2] <float> gravitational constant +/- 0.00015
au = 1.495978707e11          # [m]   <float> astronomical unit
r_sun = 6.96342e8            # [m]   <float> solar radius
m_sun = 1.98847e30           # [kg]  <float> solar mass +/- 0.00007
l_sun = 3.83e26              # [W]   <float> solar luminosity
r_jup = 7.1492e7             # [m]   <float> Jupiter radius
m_jup = 1.8981246e27         # [kg]  <float> Jupiter mass
r_earth = 6.378135e6         # [m]   <float> Earth radius R⊕
m_earth = 5.9720e24          # [kg]  <float> Earth mass M⊕
v_earth = 2.97852e4          # [m/s] <float> Earth orbital velocity (if orbit was circular) V⊕
hour = 60 * 60               # [s] One hour in seconds
day = hour * 24              # [s] One day in seconds
year = day * 365.24219       # [s] Approximately one tropical earth year in seconds
rad2deg = 57.29577951308232  # 180 / pi

[Results]                    # Comment out the first parameter if you do not need the results (transit times etc.) of the simulation.
result_file = ../results/K9.json  # <string> simulation results like transit times are saved in this file
result_dt = 1000             # Real time differences between simulation iterations when calculating transit times.
                             # This parameter is only used after the main simulation for finding the precise values for the transit parameters.
max_intervall_extensions = 5 # In unstable systems or when using a very large dt, sometimes the search for an TT has to be extended
                             # If no TT has been found max_intervall_extensions * dt around the expected interval between 2 iterations
                             # the search for this particular TT will be aborted. (dt comes from the list dts.)
comment = K9                 # You can use this comment for example as diagram title in your result plots
;verbose = True              # If False (which is default), only error messages will be printed to the console. Useful when running MCMC.

[Simulation]                 # Time intervalls and time steps of the simulation
                             # When fitting the simulation to real data, only the parameters start_date and dt are relevant.
start_date = 2455088.212         # [days] <float> Date at the start of the simulation. Often called t0. Typically Barycentric Julian Date (TDB).
dt = 1e5                     # [s] <float> real time difference between simulation iterations outside of simulation intervals where data is collected and used
                             # Needs to be small enough in order to calculate with sufficient
                             # precision when objects are close to each other.
                             # Reasonable values can easily be under 10 seconds or over 1e6 seconds.
                             # Set dt to a relatively high value, to improve performance when running MCMC
                             # Set dt to a relatively low value, when you want exact transit times in the result file.
starts = [2455088.212]           # [days] <float> starting times of the intervalls for which simulation data will be calculated
ends =   [2456400]           # [days] <float>   ending times of the intervalls for which simulation data will be calculated
dts =    [10000]             # [s] <float> real time differences between simulation iterations inside each intervall
                             # When fitting the simulation to measured flux, dt is typically identical with the exposure time of each measurement.
                             # Together, starts, ends and dts define the total number of simulation iterations 'total_iterations' for
                             # which data will be stored. total_iterations is usually much larger than the parameter frames. So not
                             # each simulation iteration will be shown in the video. Instead only 1/sampling_rate of the calculated
                             # iterations is used as a frame in the animation. sampling_rate = (total_iterations - 1) // frames + 1
                             # (// is integer-division)
                             # dt * sampling_rate is the real time difference between 2 frames in the animation.
                             # dt is proportional to the velocity of the objects in the animation.
                             # Because dt can change between intervalls, so can the animated velocity of objects in the video.
;sim_flux_file = ../data/simulations/sim001.csv # <string> When this parameter is provided, the simulated flux will be saved.
                             # The file has the same structure as the files containg measurered flux data which CurveSimulator can process:
                             # It is a CSV file with columns time, flux and flux_err.
sim_flux_err = 0.004         # White noise with standard deviation sim_flux_err will be added to the simulated flux.


[Fitting]                    # This section is only relevant for running a MCMC algorithm to fit the simulation to real data
                             # Comment out the first parameter if you do not want to fit the simulation to real data
;flux_file = ../data/TOI-4504/TOI4504_transits_sm0_3til94.csv  # <string> file with flux measurements (real data)
                             # flux_file has 3 columns: time [days], normalized flux, normalized flux standard deviation
                             # While fitting, no result file and no video will be generated.
;lmfit = True                # True for LMfit, False for MCMC
;tt_file = ../data/KEPLER9/tt.csv # <string> file with measured transit times (real data)
tt_file = ../data/KEPLER9/tt_late.csv # <string> file with measured transit times (real data)
eclipsers_names = KEPLER9b, KEPLER9c  # only primary transits by these bodies are relevant when fitting for TT
eclipsees_names = KEPLER9             # only transits eclipsing these bodies are relevant when fitting for TT

fitting_results_directory = ../results/mcmc  # All MCMC results are saved in the next available numbered subdirectory
walkers = 256                 # Number of mcmc chains
burn_in = 500                 # Number_of_points_disregarded (burn-in phase). Must be positive. Typically, 1000 is a good value.
steps = 1e7                  # Number of mcmc steps after burn-in phase
moves = (emcee.moves.StretchMove(a=2.0))  # Algorithm emcee uses for changing the parameters after each iteration
;moves = (emcee.moves.DEMove(), 0.8),(emcee.moves.DESnookerMove(), 0.2)  # Algorithm emcee uses for changing the parameters after each iteration

thin_samples = 10            # Keep only every <thin_samples>th sample from the chain to reduce autocorrelation in the chains and the size of the resulting arrays.
chunk_size = 250             # Every chunk_size steps after burn-in phase, results will be saved.
bins = 200#, 30              # Number of bins in mcmc histograms. May be several values separated by comma. Then a histogram will be generated for every bin value.
;unit = {"mass": "m_earth", "radius": "r_earth", "e": "1", "i": "deg", "P": "d", "a": "AU", "Omega": "deg", "omega": "deg", "pomega": "deg", "L": "deg", "ma": "deg", "ea": "deg", "nu": "deg", "T": "s", "t": "s"}
unit = {"mass": "m_jup", "radius": "r_jup", "e": "1", "i": "deg", "P": "d", "a": "AU", "Omega": "deg", "omega": "deg", "pomega": "deg", "L": "deg", "ma": "deg", "ea": "deg", "nu": "deg", "T": "s", "t": "s"}
                             # Specify for each of the above body parameters its unit to be used in mcmc result plots
;scale = {"mass": 1/m_earth, "radius": 1/r_earth, "e": 1, "i": rad2deg, "P": 1/day, "a": 1/au, "Omega": rad2deg, "omega": rad2deg, "pomega": rad2deg, "L": rad2deg, "ma": rad2deg, "ea": rad2deg, "nu": rad2deg, "T": 1, "t": 1}
scale = {"mass": 1/m_jup, "radius": 1/r_jup, "e": 1, "i": rad2deg, "P": 1/day, "a": 1/au, "Omega": rad2deg, "omega": rad2deg, "pomega": rad2deg, "L": rad2deg, "ma": rad2deg, "ea": rad2deg, "nu": rad2deg, "T": 1, "t": 1}
                             # Specify for each of the above body parameters the value it has
                             # to be multiplied with in order to represent its above specified unit.


[Video]                      # This section controls length and quality of the simulation and the resulting video.
                             # Comment out the first parameter to prevent video generation.
;video_file = ../animations/TOI-4504.mp4  # <string> the resulting video is saved in this file
frames = 60                  # <int> number of frames of video. Proportional to Curvesimulator's run time
                             # and to the length of the animation.
fps = 10                     # <int> frames per second in video. Proportional to the velocity of the
                             # objects in the animation. Inverse proportional to length of video.

[Scale]                      # This section controls the size of objects in the animation.
scope_left = 0.4 * au        # [m] <float> scope of left plotting window is [-scope_left, scope_left].
                             # Middle of window is (0.0, 0.0)
scope_right = 0.4 * au       # [m] <float> scope of right plotting window is [-scope_right, scope_right].
                             # Middle of window is (0.0, 0.0)
autoscaling = on             # <string> allowed values: on, off
star_scale_left = 100.0      # [1] <float> (if autoscale off) animate stars with StarScale_left times
                             # enlarged radius in left view.
planet_scale_left = 1000.0   # [1] <float> (if autoscale off) animate planets with PlanetScale_left times
                             # enlarged radius in left view.
star_scale_right = 100.0     # [1] <float> (if autoscale off) animate stars with StarScale_right times
                             # enlarged radius in right view.
planet_scale_right = 1000.0  # [1] <float> (if autoscale off) animate planets with PlanetScale_right times
                             # enlarged radius in right view.
min_radius = 0.4             # [%] <float> (if autoscale on) radius of smallest body in animation relative
                             # to plot scope. radius=100 would fill the whole plot.
max_radius = 2.0             # [%] <float> (if autoscale on) maximum radius of largest body in animation
                             # relative to plot scope. radius=100 would fill the whole plot.
                             # If necessary, scaling will be done logarithmically instead of linear.

[Plot]                       # Adjust the plot parameters in this section only if the plots in the video do not fit your screen
figure_width = 16            # <int>   width of figure which contains all plots and animations
figure_height = 8            # <int>   height of figure which contains all plots and animations
xlim = 1.25                  # <float> left and right view both show x-values between -Xlim and + Xlim
ylim = 1.0                   # <float> left and right view both show y-values between -Ylim and + Ylim
red_dot_height = 1/20        # <float> height of red dot in light curve plot relative to height of y-axis
red_dot_width = 1/235        # <float> width of red dot in light curve plot relative to width of x-axis


[KEPLER9]
body_type = star
primary = self
color = 0.99, 0.99, 0.99
mass =                          1.05   * m_sun             # +-0.03
radius =                        0.9742 * r_sun             # +-0.0083
luminosity =                    0.9742 * 0.9742 * l_sun    # L is proportional to R**2 * T**4,  T almost identical to sol
limb_darkening_1 =              0.351                      # +-0.047
limb_darkening_2 =              0.269                      # +-0.071
limb_darkening_parameter_type = u


[KEPLER9d]
body_type = planet
primary =   KEPLER9
color =     0.99, 0.01, 0.01
mass =      10 * m_earth
radius =    1.64 * r_earth  # +0.19 −0.14
e =         0
i =         90
P =         1.592851 * day  # +- 0.000045
Omega =     0
omega =     0
ma =        0    # find ma so that T0 @ 2455015.0943 +0.0018 −0.0033

[KEPLER9b]
body_type = planet
primary =   KEPLER9
color =     0.01, 0.7, 0.7
#           value               lower bound       upper bound        sigma
mass =      43.4 * m_earth,     20 * m_earth,     80 * m_earth,      1.8 * m_earth
radius =    8.29 * r_earth,   #                                      0.5 * r_earth
e =         0.0609,             0.05,             0.07,              0.0012
i =         88.983            #                                      0.006
P =         19.25 * day,        19.15 * day,      19.35 * day,       0.05 * day
Omega =     180,              #                                      fix
omega =     357,                355,              359,               0.5
ma =        2.6,                0,                5,                 0.6
    
    
[KEPLER9c]
body_type = planet    
primary =   KEPLER9
color =     0.7, 0.01, 0.7
#           value               lower bound       upper bound        sigma
mass =      29.9 * m_earth,     15 * m_earth,     60.0 * m_earth,    1.2 * m_earth
radius =    8.08 * r_earth,   #                                      0.5 * r_earth
e =         0.06691,            0.055,            0.075,             0.00011
i =         89.188,           #                                      0.006
P =         38.95 * day,        38.5 * day,       39.5 * day,        0.1 * day
Omega =     179,                177,              181,               0.2
omega =     167.5,              167,              168,               0.1
ma =        307.4,              307,              308,               0.1