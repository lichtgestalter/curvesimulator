;Exceptionally large Transit Timing Variations
;induced by two resonant warm gas giants in a three planet system.
;Michaela Vitkova et al
;https://arxiv.org/abs/2412.05609

[Astronomical Constants]     # Do not edit this section!
                             # You may use the astronomical constants defined in this section in
                             # all following sections, e.g. scope_left = 1.9 * au
g  = 6.67430e-11             # [m**3/kg/s**2] <float> gravitational constant +/- 0.00015
au = 1.495978707e11          # [m]   <float> astronomical unit
r_sun = 6.96342e8            # [m]   <float> solar radius
m_sun = 1.98847e30           # [kg]  <float> solar mass +/- 0.00007
l_sun = 3.83e26              # [W]   <float> solar luminosity
r_jup = 7.1492e7             # [m]   <float> Jupiter radius
m_jup = 1.8981246e27         # [kg]  <float> Jupiter mass
r_earth = 6.378135e6         # [m]   <float> Earth radius R⊕
m_earth = 5.9720e24          # [kg]  <float> Earth mass M⊕
v_earth = 2.97852e4          # [m/s] <float> Earth orbital velocity (if orbit was circular) V⊕
hour = 60 * 60               # [s] One hour in seconds
day = hour * 24              # [s] One day in seconds
year = day * 365.24219       # [s] Approximately one tropical earth year in seconds

[Results]                    # Comment out the first parameter if you do not need the results (transit times etc.) of the simulation.
result_file = ../results/TOI-4504_result001.json  # <string> simulation results like transit times are saved in this file
result_dt = 100              # Real time differences between simulation iterations when calculating transit times.
                             # This parameter is only used after the main simulation for finding the precise values for the transit parameters.
comment = c: Vitkova d: maxlikelihood  # You can use this comment for example as diagram title in your result plots
verbose = True               # If False (which is default), only error messages will be printed to the console. Useful when running MCMC.

[Simulation]                 # Time intervalls and time steps of the simulation
                             # When fitting the simulation to real data, only the parameters start_date and dt are relevant.
start_date = 2458400         # [days] <float> Date at the start of the simulation. Often called t0. Typically Barycentric Julian Date (TDB).
dt = 1000                   # [s] <float> real time difference between simulation iterations outside of simulation intervals where data is collected and used
starts = [2458400]         # [days] <float> starting times of the intervalls for which simulation data will be calculated
ends =   [2460862]         # [days] <float>   ending times of the intervalls for which simulation data will be calculated
dts =    [200]            # [s] <float> real time differences between simulation iterations inside each intervall
;sim_flux_file = ../data/simulations/sim001.csv # <string> When this parameter is provided, the simulated flux will be saved.
                             # The file has the same structure as the files containg measurered flux data which CurveSimulator can process:
                             # It is a CSV file with columns time, flux and flux_err.
sim_flux_err = 0.004         # White noise with standard deviation sim_flux_err will be added to the simulated flux.


[Fitting]                    # This section is only relevant for running a MCMC algorithm to fit the simulation to real data


[Video]                      # This section controls length and quality of the simulation and the resulting video.
                             # Comment out the first parameter to prevent video generation.
;video_file = ../animations/TOI-4504_result001.mp4  # <string> the resulting video is saved in this file
frames = 3000                  # <int> number of frames of video. Proportional to Curvesimulator's run time
                             # and to the length of the animation.
fps = 25                     # <int> frames per second in video. Proportional to the velocity of the
                             # objects in the animation. Inverse proportional to length of video.

[Scale]                      # This section controls the size of objects in the animation.
scope_left = 0.4 * au        # [m] <float> scope of left plotting window is [-scope_left, scope_left].
                             # Middle of window is (0.0, 0.0)
scope_right = 0.4 * au       # [m] <float> scope of right plotting window is [-scope_right, scope_right].
                             # Middle of window is (0.0, 0.0)
autoscaling = on             # <string> allowed values: on, off
star_scale_left = 100.0      # [1] <float> (if autoscale off) animate stars with StarScale_left times
                             # enlarged radius in left view.
planet_scale_left = 1000.0   # [1] <float> (if autoscale off) animate planets with PlanetScale_left times
                             # enlarged radius in left view.
star_scale_right = 100.0     # [1] <float> (if autoscale off) animate stars with StarScale_right times
                             # enlarged radius in right view.
planet_scale_right = 1000.0  # [1] <float> (if autoscale off) animate planets with PlanetScale_right times
                             # enlarged radius in right view.
min_radius = 0.4             # [%] <float> (if autoscale on) radius of smallest body in animation relative
                             # to plot scope. radius=100 would fill the whole plot.
max_radius = 2.0             # [%] <float> (if autoscale on) maximum radius of largest body in animation
                             # relative to plot scope. radius=100 would fill the whole plot.
                             # If necessary, scaling will be done logarithmically instead of linear.

[Plot]                       # Adjust the plot parameters in this section only if the plots in the video do not fit your screen
figure_width = 16            # <int>   width of figure which contains all plots and animations
figure_height = 8            # <int>   height of figure which contains all plots and animations
xlim = 1.25                  # <float> left and right view both show x-values between -Xlim and + Xlim
ylim = 1.0                   # <float> left and right view both show y-values between -Ylim and + Ylim
red_dot_height = 1/20        # <float> height of red dot in light curve plot relative to height of y-axis
red_dot_width = 1/235        # <float> width of red dot in light curve plot relative to width of x-axis


[TOI-4504]
body_type = star
primary = self
color = 0.99, 0.99, 0.99
mass = 0.885 * m_sun       # +-0.05
radius = 0.92 * r_sun
luminosity = 0.62 * l_sun
limb_darkening_1 = 0.4765  # paper contains different parameters q1, q2 for different planets. I averaged them. The effective difference is tiny.
limb_darkening_2 = 0.3495
limb_darkening_parameter_type = q


[TOI-4504b]
body_type = planet
primary = TOI-4504
color = 0.99, 0.01, 0.01
mass = 10.4 * m_earth
radius = 2.691 * r_earth
e = 0.0
i = 87.4
P = 2.42614 * day
Omega = 0
omega = 90
T = 0
t = 3600 * 24 * -0.383  # first Transit T0 BJD 2458400.383, 0.383 days after simulation's start date (t0 [BJD] 2459038.458)


[TOI-4504d]  # planet d before planet c because the integration (rebound) works best when the innermost planets come first
body_type = planet
primary = TOI-4504
color = 0.01, 0.99, 0.01
mass = 1.4166 * m_jup
radius = 1.06 * r_jup
e = 0.1225325
i = 88.5781
P = 41.510691327 * day
Omega = 1.5319
omega = 84.2265
ma = 320.8314


[TOI-4504c]
body_type = planet
primary = TOI-4504
color = 0.99, 0.99, 0.01
mass = 3.7672 * m_jup  # +-0.18
radius = 0.9897 * r_jup
e = 0.0320  # +-0.0015
i = 89.69 # +-0.03
P = 82.5438 * day  # valid for epoch BJD = 2458400    +-0.0163 days
Omega = 0  # Ω +-1
omega = 270.9 # +-2.1????  ω
ma = 173.1  # +-2
