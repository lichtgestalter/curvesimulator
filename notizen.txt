Recently done / in progress:

TESS Daten angucken: In process_flux_data eine Boolean Mask erzeugen (und abspeichern?), die ich dann ueber jede erzeugte
lightcurve legen kann, um die Datenpunkte zu entfernen, fuer die es keine TESS-Daten gibt, bevor ich die Residuen ausrechne.




Fragen an Simon:

    Ich muss also "nur" meine errechnete lightcurve mit den TESS-Daten vergleichen und log_likelihood durch die Summe der Residuen-Quadrate berechnen?
    Rebound ist schnell fuer festes dt. TESS-Daten halten sich da aber nicht dran.
        Abweichung bis 70 Sekunden bei 1800 Sekunden exposure. Egal?
    Vitkova waehlte t0 = 2458400. Der erste TESS-Datenpunkt danach ist aber t0 = 2458400.010395068.
        Das ist 898 Sekunden spaeter. Ich habe jetzt erstmal t0 = 2458400.011 gesetzt.
    MCMC-Code erklaeren:
        flux_unc wird nie verwendet?




    Was macht flatten/thin mit den Chains?

    Hast du Literatur zu multiple Transits / Fallunterscheidung bei gegenseitiger Ueberdeckung von 3 oder mehr Kreisen?


NEXT Astrophysics:

        In aelteren TESS-Sektoren nach Planet-d-Transits suchen.

        Sector 61: Daten mit besserer Qualitaet downloadbar? Es gibt 3 Kurven und 2 Pixelfiles zum Download.
            Die 2 Pixelfiles vergleichen. Habe schon cutted files gemacht.

        Lassen sich die Flux-Daten durch eine manuell von mir gemachte alternative Pixelmaske verbessern? Z.B. 4x4 statt 3x2?

NEXT Programming:

        Alte d-transits finden

        MCMC-Integration
            Super simples Fakemodell machen und mit MCMC zum Interasgieren bringen
                Koennte z.B. Funktion sein, die  a * x + b + r berechnet
                    r ist ein kleiner Zufallswert (white noise)
                    a und b sind die durch MCMC zu bestimmenden Parameter


        Mit Rebound ermittelte Transit-Parameter vernuenftig speichern.
            Bisherige Ermittlungs- und Abspeicher-Funktionen ersetzen
            z.B. obsolete Funktion lightcurve_minima in cs_lightcurve.py


    Hinter MCMC-Integration zurueckgestellt:

        BUG! Ich speichere fuer den Stern ueberfluessige Parameter mit falschen Werten ab? Z.B. e und i.

        Option in config_file einbauen: sollen eclipsees in find_transits() auf sterne eingeschraenkt sein?
            Besser: Jeder Body kriegt die Parameter relevant_eclipser  (yes/no) und relevant_eclipsee (yes/no)

        Result evaluation komfortabel fuer User nutzbar machen.

        Orbitparameter regelmaessig (z.B. bei jedem Transit) im Resultfile speichern.

        init_rebound() verallgemeinern. Auch Hierarchie ermoeglichen (=wer kreist um wen?)

        Neu eingefuehrte Konstanten in Parameterfile statt hart im Code, z.B.
            Mindestgenauigkeit bei binary search von Transittimes
            Akzeptable Energieveraenderung

        Neben Energieerhalt weiteren Check einbauen, dass Integration korrekt ist.
            Erhalt des Drehmoments?

        Damit CurveSimulator auch fuer andere Systeme ausser TOI4504 funktioniert:
            Aus dem User Input die Kepler-Parameter berechnen, die Rebound braucht, und Rebound damit fuettern.
            Fuer mich relevante Parameter, die Reboundklasse Orbit akzeptiert:
                P :         orbital period
                a :         semimajor axis

                e :         eccentricity
                inc :       inclination

                Omega :     longitude of ascending node
                omega :     argument of pericenter
                pomega :    longitude of pericenter

                f :         true anomaly
                M :         mean anomaly
                E :         eccentric anomaly (requires solving Kepler's equation - only calculated when needed)

                l :         mean longitude = Omega + omega + M
                theta :     true longitude = Omega + omega + f

                T:          time of pericenter passage


        Code entsorgen, der durch rebound abgedeckt wird.

        Alle kritischen Textmeldungen mit colorama einfaerben (siehe color.py in Ordner debug)

        Multiple transits (und secondary eclipses?) korrekt hantieren.
            Siehe circle_eclipses.py

        Lohnt es sich die Verdunklung durch secondary eclipses und eclipses unter Planeten (fx planet c verdeckt planet d) zu modellieren?
        Bei Albedo von 50% muesste eine secondary eclipse halb so tief sein wie eine primary eclipse, korrekt?
                Nein, der Effekt ist viel kleiner und kann vorerst vernachlaessigt werden. Kann ich irgendwann spaeter mal einbauen.


    Example videos
        Videos erstellen und (auf youtube? eher vimeo wg. Bildqualitaet) veröffentlichen.
        Auf Video-Seite im Wiki (letzter Satz) ungefaehr sowas ergaenzen:
            Or watch this [version with awful compression artefacts](https://youtu.be/7diyCCIqiIc), courtesy of youtube.
            Sternsysteme aus weiteren Papern visualisieren.
                Zunaechst nur Systeme mit nur einem Stern

    Wiki aktualisieren.
        Results Output auf eigener Seite im Wiki dokumentieren.
        Programm ist optimiert fuer Visualisierung. Nicht fuer numerische Praezision. Kleines dt bei kleinen Perioden notwendig. Trotzdem ungenau.
            Obsolet mit Verlet???
        Im Wiki die Videos verlinken.
        Evtl. restliche Formulierungen von AI verbessern lassen.
            Take a look at this text on a page of a wiki about a python library. The text is written in mark-up language.
            Improve the language, for example by removing spelling errors and making the formulations more elegant.
            Format your improvements in the same mark-up language: ""

VERSION 1.0.0 veroeffentlichen !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

    Fragen an Akademiker:

        How do I get my project used by others?
            Publish as a paper?
            How do I get my project published as a paper?
        Where do astronomers gather? Is https://astronomy.stackexchange.com/ the best place to ask questions?
        Is there a community of astronomers specialized in exoplanets that would be welcoming to a dabbling layman like me?
        How do I reliably find out about new papers with interesting star systems? Searching on "arxiv.org"? Or is there a better way?

        How to model sun spots?
            Nora said (in episode 37, at 12:00): Spots move away from the center. Why?
            Nora said (in episode 37, at 14:00): Peaks in frequency spectrum are integer multiples of peak with highest power. (harmonics) Why?
            Is it sufficient to just model the lowest frequency? How big is the part I would miss?
        How to model pulsations and the like (sine curve)?
            Nora said (in episode 37, at 15:30): Peaks in frequency spectrum are random.
        Should flares be modeled or are they too unpredictable?

    PR:
        Bekannte:
            https://www.noraeisner.com/
            Aiden
            Brian
            Peters Kumpel

        Universitäten:
            CZ:
                michaela.vitkova@asu.cas.cz, vitkova@mail.asu.cas.cz
                https://stel.asu.cas.cz/en/extrasolar-planet-research/extrasolar-members/
            Niels Bohr:
                Uffe
                https://nbi.ku.dk/english/research/astrophysics/exoplanets/
                http://www.mindstep-science.org/about_us.html ???
                https://www.iau.org/administration/membership/individual/11759/ ???
            Aarhus:
                https://phys.au.dk/sac/our-research/extrasolar-planets/
                Simon Albrecht, Associate Professor, Department of Physics and Astronomy, +4587155702, albrecht@phys.au.dk
                    https://pure.au.dk/portal/en/persons/albrecht%40phys.au.dk
                    https://space.mit.edu/home/albrecht/
                Professor Emeritus Jørgen Christensen-Dalsgaard
                    Stellar Astrophysics Centre (SAC) an der Aarhus Universität
            SDU (Odense):
                https://portal.findresearcher.sdu.dk/da/persons/toby-hinse, +4565507131, toch@cp3.sdu.dk
            DTU:
                http://www.exoplanets.dk/
                https://orbit.dtu.dk/en/persons/lars-christian-astrup-buchhave, buchhave@space.dtu.dk
                Office: +45 4525 9500, office@space.dtu.dk
                https://www.space.dtu.dk/afdelinger/astrofysik-og-atmosfaerens-fysik


        Organisationen:
            https://www.aavso.org/
            https://www.astropy.org/

        Foren
            https://astronomy.stackexchange.com/
            https://space.stackexchange.com/
            https://forum.astronomisk.dk/
            https://www.astrobin.com/forum/
            https://forum.astronomie.de/

            https://www.reddit.com/r/exoplanets/
            https://www.reddit.com/r/TheExoplanetsChannel/
            https://www.reddit.com/r/askastronomy/
            https://www.reddit.com/r/Astronomy/
            https://www.reddit.com/r/astrophysics/
            https://www.reddit.com/r/space/


    Um Hinweis auf CurveSimulator(-Paper?) bei Veroeffentlichungen bitten
        Im GitHubWiki
        Print in Konsole
        Im JSON File
        Copyright notice ins Video?


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

    Kleines Tool (mit tkinter) als separates Programm, zum Planen des Videos (siehe Seite "Planner" in TOI4504.xlsx)?

    Systeme mit mehr als einem Stern korrekt hantieren (Initial Velocity)

    Multiple Eclipses (e.g. Triply Eclipsing Triples, >=3 bodies in line of sight):
        Handle them correctly
        Example systems: https://arxiv.org/pdf/2204.02539.pdf

    Secondary eclipses (Sonne verdeckt Planet)

    Indirect light / Planet Albedo
        Bei Total System Luminosity beruecksichtigen -> kleiner dip in lightcurve bei secondary eclipse
        Phasen beruecksichtigen: Halbplanet, Vollplanet, ...

        AI-Anfrage: Wir beobachten die Helligkeit eines viele Lichtjahre entfernten Sternsystems mit einem Stern und einem Exoplaneten.
        Die Blickrichtung von der Erde zu dem Stern bildet mit der Verbindung von dem Stern zu dem Exoplaneten einen Winkel alpha.
        Wenn alpha = 0 Grad, befindet sich der Exoplanet von der Erde aus gesehen genau vor dem Stern. Bei alpha=180 Grad befindet
        sich der Exoplanet genau hinter dem Stern. Bei alpha=90 Grad befindet sich der Exoplanet seitlich vom Stern und es wird von
        der Erde aus gesehen genau die Haelfte des Exoplaneten von dem Stern angeleuchtet. Sei max_light die maximale Lichtmenge
        (Luminosity), die der Exoplanet von dem Stern Richtung Erde reflektieren kann, wenn die komplette der Erde zugewandte
        Haelfte des Exoplaneten von dem Stern angeleuchtet wird.  Schreibe eine Pythonfunktion, die abhaengig von alpha errechnet,
        wie viel Prozent von max_light von dem Exoplaneten Richtung Erde reflektiert wird.

        def reflected_light_percentage(alpha):
            # Konvertiere alpha in Radiant
            alpha_rad = math.radians(alpha)

            # Berechne den Prozentsatz des reflektierten Lichts
            percentage = 50 * (1 + math.cos(alpha_rad))

            return percentage


    Add Neptun's mass and radius to astronomical constants in config file?

    Orbits einzeichnen?
        Kleiner Punkt (nur 1 Pixel?) fuer jeden Frame fuer jeden Koerper
        Option draw_orbits (on/off) (pro Video oder pro Koerper?)
        Option orbit_color

    Radial velocity:
        Extraplot im Video oder als PNG-file speichern: Lightcurve und die Geschwindigkeit in Beobachterrichtung (y-Achse) für jeden Stern.
        Plot radial velocity (movement of star to/from viewer). Provides a check if the simulation is realistic.
        Farbe des Sterns abhängig von RV varieren?

    Model variable stars:
        Parameter für regelmäßige Helligkeitsänderungen: variation = [(amplitude, periode, phase(shift?))]
        Das deckt auch Sunspots ab. Die wären sonst zu beschwerlich.
        Evtl. ermoeglichen, als Parameter den Namen einer Funktion anzugeben, die die Helligkeit des Sterns abhaengig vom Zeitpunkt (in BJD?) berechnet.



####################################################

I implemented all suggestions from zoom call 29.03.2022, but tried and dismissed using astronomical constants and units from astropy because 100 times slower.

########################################

    Debugging State Vector Calculation:
        Fuer nichttriviale Orbits (z.B. i=90, ϖ=0, aber Ω!=0) liegt die Ellipse anders als in https://orbitalmechanics.info/ (oder auch Geogebra?) !!!
        Die Form der Ellipse ist vermutlich auch nur fuer Ω=0 korrekt.
        Ich habe keplerian_elements_to_state_vectors() zu keplerian_elements_to_state_vectors_debug() vereinfacht.
        Ich habe eine altenative Berechnungsmethode aus einem anderen Paper in keplerian_elements_to_state_vectors_debug_new() implementiert.
            Diese produziert die gleichen Fehler :(
        Veraenderungen von ϖ werden sowohl fuer i=90 und i=45 korrekt berechnet.
        Das einzige Problem ist vermutllich Ω!=0.
        Alternative Berechnung fuer Startposition (state vector) aus Quelle [f] in keplerian_elements_to_state_vectors_debug_new liefert fuer Ω!=0 genau den gleichen Fehler wie die urspruengliche Berechnung!
        Alternative Berechnung fuer ea (eccentric anomaly) aus Quelle [f] in keplerian_elements_to_state_vectors_debug_new liefert fuer Ω!=0 genau den gleichen Fehler wie die urspruengliche Berechnung!
        Schoene Darstellung von Orbits abhaengig von Kepler-Parametern zum vergleichen: https://orbitalmechanics.info/
        LOESUNG:
            2 der 3 Parameter ω, ϖ, Ω muessen bekannt sein. Der dritte wird aus den anderen beiden mit ω = ϖ - Ω berechnet.
            Wenn man Ω = ϖ setzt (und folglich ω=0), verhaelt sich der Orbit bei Aenderungen von Ω korrekt.
            Mit den Daten unseres Sonnensystems auf https://ssd.jpl.nasa.gov/planets/approx_pos.html Table 1, die als Konvention
            Transit bei i = 0 Grad haben, tauschen edge-on und overhead view. Wenn ich die Inklination an die Transit-bei-90-Grad-
            Konvention anpasse (i_90 = 90 - i_0 laut perplexity) werden die Orbits desto merkwuerdiger, je groesser Ω ist.


    Debugging gravitational parameter mu for star systems without a domineering body, e.g. binary star systems
        Special case: 2 stars, second star nu=90 e=0 i=90:
            dy=0, dz=0, dx=sqrt(mu/a), a((mu*P**2)/(4*pi**2))**(1/3)
        Hacking velocity with a correction: self.velocity /= correction
            Let MassB < MassA, e = 0:
            correction = 1 + (MassB / MassA)
            Masses 6.5 and 5.9 -> correction = 1.91
            Mass A = Mass B -> correction = 2.0
        It's more complicated for systems with more than 2 stars...

 #######################

 CHANGELOG

    0.2.15  Text "lichtgestalter/CurveSimulator" added to video.
            Debugging-Code (especially for state vector calculation) moved to backup files in folder "debug".
    0.2.16  Lightcurve in video now contains all data.
    0.2.17  Calculates for each body how many video frames are needed to complete one orbit.
    0.2.18  Using Kepler's Third Law, calculates Period P from semi-major axis a and vice versa.
    0.2.19  Calculates the initial velocity of the primary body based on the principles of
            conservation of momentum and the center of mass motion.
    0.2.20  Correct handling of secondary stars
    0.2.21  Configfile errorproofing
    0.2.22  Example videos
                TIC470710327 (with hacked velocity correction)
                TOI-4504 / TIC349972412 (1 star, 2 transiting planets, 1 non-transiting planet)
    0.3.0   Limb darkening alternative models/parameters
    0.3.1   Check if ffmpeg is available
    0.3.2   Parameter output to JSON-File
            Transit times:
            T1, T2, TT, T3, T4, T14
            TT (Time of Transit): The time of minimum projected separation between the star and planet, as seen by the observer
            b (Transit Impact parameter): minimum projected separation at the time of transit, in stellar radii
                Bug Gefahr: der relative Radius bezieht sich auf den verdeckten Koerper? Das waere bei sekundaeren Eclipses wohl unerwuenscht
            T12 (Ingress) is the period when an exoplanet begins to cross in front of its host star. It consists of two parts:
                T1 Exterior ingress (first contact): The moment when the planet's disk first touches the edge of the star's disk.
                T2 Interior ingress (second contact): The point at which the entire planet has moved onto the stellar disk.
            T23 is called full transit
            T34 (Egress) is the period when an exoplanet exits its transit across the star. It also has two parts:
                T3 Interior egress (third contact): The moment when the planet's disk touches the opposite edge of the star's disk as it begins to exit.
                T4 Exterior egress (fourth contact): The point at which the planet has completely moved off the star's disk, concluding the transit.
            T14 is called total transit
            The accuracy of all transit times depends on the parameter dt, the real time difference between simulation iterations.
            By contrast the timestamps and luminosity values of the lightcurve minima have been slightly adjusted using quadratic interpolation.
    0.3.3   Improved orbit simulation using Verlet integration. Orbits are now numerically stable.
    0.3.4   Result files will no longer be overwritten. Instead, a new file with a running number will be created.
    0.3.5   Result file usage examples (result_evaluation.py)
    0.3.6   Postponed! state_vector_to_keplerian_elements
    0.3.7   Result output enhancements
                Angles are now stored in the result file not only in radians but also in degrees.
                Comment-Field in Config-File -> Result file, plots
                Depth of each transit added to result file
                TOI-4504 Research
                    Save plots
                    Sensitivity analysis:  What happens wenn parameters are changed + or - 3 standard deviations?
                        Checked for mass, e, i, P of planets c and d.
                        Checked for longitude_of_ascending_node and argument_of_periapsis of planet c.
                        Result:
                            For some changes of longitude_of_ascending_node (e.g. +3 or +6 standard deviations) the decline
                            of planet c's transit durations is significantly delayed.
                            In each scenario, planets c and d have alternately longer phases with transits.
                     Manually extracted transit parameters (T1, T2, TT, T3, T4, depth) with high accuracy from TESS data.
    0.3.8 Artificial Star System
        Under which circumstances are planets alternately transiting?
            Larger and closer second planets with different inclinations change the inclination of the first planet faster.
            The effect changes somewhat smoothly with changing with increasing mass and decreasing distance of the second planet.
            This supports the thesis that the alternately transiting behaviour is real and not just an artefact.
    0.3.9 Result output enhancements
        More flexible result evaluation
    0.4.0 Constant energy check
        Added function energy() to check if the total energy in the star system stays constant as it should.
        Results:
            Precision: Error remains below ±2×10⁻⁷ relative to the mean (1 part in 5 million).
            Periodicity of error: Repeats about every 5,500 iterations (Δt=600 s per iteration) in TOI-4504
            This indicates a highly stable system with minimal energy drift over time.
    0.4.1 Fit simulation to d-Transits
        Planet d's mean anomaly adjusted in the config file until d's transit at 2460736.63 happens at the right time.
        But then the transit before was a whole day off (2460696.46 iso 2460695.53).
        -> postponed
    0.4.2 Trying out Rebound and other software
        N-Body programs:
            Exostriker: does not run correctly on Windows (had to rename python.exe, still had problems)
            Rebound: Excellent package. I consider using Rebound internally in Curvesim, replacing some of my own functions.
        Programs for estimating planet system parameters:
            Juliet: Project inactive?
            exoplanet: Project inactive?
            Exofast? Seems professionell. Doubtful if it works on Windows .
    0.4.3 Fitting TOI-4504
    0.5 First partial Rebound integration
    0.5.3 Added cs_flux_data.py to CurveSimulator


-----------------------------------------------------------------------

Call mit Simon, 12.05.25:

    Zeigt der gute Plot wirklich beide Transits?
    Die beiden Transits nebeneinander mit der gefitteten Linie plotten. (Siehe cal_phot.py 227-228)
    for_Uli_mcmc.py debuggen, damit es nicht abstuerzt, wenn man nur einen einzigen Parameter fittet (Zeilen 133-141 und 171-179)
    Aus dem CSV alle Zeilen entfernen, die nicht nahe an den beiden Transits liegen.
    Den Flux der beiden Transits getrennt voneinander auf 1 normieren.
    Zunaechst nur einen Parameter fitten.

    Reihenfolge:
        P
        T0
        Radiusverhaeltnis R-Planet / R-Stern
        inc
        limb darkening


Next Steps nach Call mit Simon, 04.06.25:

    Mail an Simon schreiben:
        Github pfad zum Clonen
        Relevante Verzeichnisse erklaeren

    Simon zum aendern auf GitHub berechtigen?

    Uncertainties korrekt skalieren
    mit mcmc spielen
    Simon schickt Code Update fuer priors
    Treffen 16.6.

Next Steps nach Call mit Simon, 16.06.25:

    Zuerst nach d-Transits in den alten Daten suchen:
        BLS benutzen! https://github.com/spacetelescope/tessworkshop_tutorials/blob/master/bls/bls-tutorial.ipynb
        (Ganz eventuell auch Lightcurve benutzen: https://lightkurve.github.io/lightkurve/tutorials/1-getting-started/what-are-periodogram-objects.html )
        b- und c-Transits aus den Daten entweder ganz entfernen oder rausrechnen.
        Letzteres haette den Vorteil, dass dann nicht potenziell d-Transits als Kollateralschaden mit entfernt werden.
        Moegliche Tests:
            Finde ich b-Transits in den gesamten Daten?
            Finde ich die beiden d-Transits in den neuen Daten?
            Finde ich Transits in von mir simulierten Daten?

    CurveSimulator mit MCMC verknuepfen:
        In Funktion log_likelihood die Berechnung von residuals_phot_sum_squared durch meinen Code ersetzen
        In "sampler = emcee.EnsembleSampler(nwalkers, ndim, log_probability, args=(phot_data, spec_data, para, fitting_indices, transformer)"
            enthaelt args die parameter von log_probability (ausser theta = Vektor der Parameter, die MCMC veraendern darf)
            reichen als args data (TESS Messwerte) und para (Input, also Keplerparameter etc)
        Meine simulierten Fluxdaten muss ich so anpassen, dass sie in jedem Sektor ueber den gleichen Zeitraum integrert sind, wie die jeweiligen TESS-Daten
        Simon schickt Update von seinem Code




