 

In [9]: pl1_esinw = fit.mcmc_sampler.samples[:,4]

In [10]: pl1_ecosw = fit.mcmc_sampler.samples[:,5]
 
In [13]: pl2_esinw = fit.mcmc_sampler.samples[:,10]

In [14]: pl2_ecosw = fit.mcmc_sampler.samples[:,11]

In [15]: e_p1 = np.sqrt(pl1_esinw**2 + pl1_ecosw**2)
 
In [18]: e_p2 = np.sqrt(pl2_esinw**2 + pl2_ecosw**2)

In [21]: e_w1 =np.degrees(np.arctan2(np.radians(pl1_esinw),np.radians(pl1_ecosw)))

In [23]: e_w2 =np.degrees(np.arctan2(np.radians(pl2_esinw),np.radians(pl2_ecosw)))

In [26]: e_w2 =e_w2%360
 
In [29]: pl1_lam = fit.mcmc_sampler.samples[:,6]
 
In [31]: pl2_lam = fit.mcmc_sampler.samples[:,12]

In [32]: pl1_Ma = (pl1_lam%360 - e_w1%360)%360
 
In [34]: pl2_Ma = (pl2_lam%360 - e_w2%360)%360
 
In [46]: mut_incl = rv.mut_incl(fit.mcmc_sampler.samples[:,7],fit.mcmc_sampler.samples[:,13],fit.mcmc_sampler.samples[:,14]%360)
 
In [53]: samp = [e_p1,e_p2,e_w1,e_w2,pl1_Ma,pl2_Ma,mut_incl]
 
In [55]: level = (100.0-68.3)/2.0
 

In [57]: for i in range(len(samp)):
    ...:     ci = np.percentile(samp[i], [level, 100.0-level])
    ...:     print(np.median(samp[i]), "- %s"%(np.median(samp[i])-ci[0]), "+ %s"%(ci[1]  - np.median(samp[i]) ))
    ...:     
0.044501364011659356 - 0.0008769572039779849 + 0.0010189815376304284
0.03200772244443349 - 0.001433813572219677 + 0.0016183100106932358
98.26518773366644 - 5.075105095143584 + 6.066885055286903
270.89158998397454 - 2.248731914702887 + 2.039263823617432
271.61782056744033 - 7.516692564398284 + 7.35468787912032
173.075514117695 - 1.9147053793222994 + 2.104311697066464
4.725536193322315 - 0.254677033676197 + 0.34625921359118994

In [58]: mut_incl_bf = rv.mut_incl(fit.i[0],fit.i[1],fit.Om[1]%360)
---------------------------------------------------------------------------
 
In [60]: mut_incl_bf
Out[60]: 5.005884084778168

